/*!
 * 
 * Made with <3 by the Grove team | Mon Aug 09 2021 13:21:12 GMT-0500 (Central Daylight Time)
 *
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkthe_grove"] = self["webpackChunkthe_grove"] || []).push([["src_js_game_scene_ts"],{

/***/ "./src/js/game/scene.ts":
/*!******************************!*\
  !*** ./src/js/game/scene.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SceneSetupScript)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var _ecs_entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ecs/entity */ \"./src/js/ecs/entity.ts\");\n/* harmony import */ var _graphics_graphics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../graphics/graphics */ \"./src/js/graphics/graphics.ts\");\n/* harmony import */ var _physics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../physics */ \"./src/js/physics.ts\");\n/* harmony import */ var _script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../script */ \"./src/js/script.ts\");\n/* harmony import */ var _json_entities_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../json/entities.json */ \"./src/js/json/entities.json\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass SceneSetupScript extends _script__WEBPACK_IMPORTED_MODULE_0__.default {\r\n    init() {\r\n        this.skybox = new _ecs_entity__WEBPACK_IMPORTED_MODULE_1__.default();\r\n        {\r\n            // skybox state\r\n            const imagePrefix = '/img/skybox/';\r\n            const directions = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];\r\n            const imageSuffix = '.jpg';\r\n            const skyGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.BoxBufferGeometry(2000, 2000, 2000);\r\n            const materialArray = [];\r\n            // load skybox images\r\n            const loader = new three__WEBPACK_IMPORTED_MODULE_2__.ImageBitmapLoader();\r\n            for (let i = 0; i < 6; i++) {\r\n                loader.load(imagePrefix + directions[i] + imageSuffix, (image) => {\r\n                    const map = new three__WEBPACK_IMPORTED_MODULE_2__.CanvasTexture(image);\r\n                    const mat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\r\n                        map,\r\n                        side: three__WEBPACK_IMPORTED_MODULE_2__.BackSide,\r\n                        fog: false,\r\n                    });\r\n                    materialArray[i] = mat;\r\n                });\r\n            }\r\n            const skyboxMesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(skyGeometry, materialArray);\r\n            // graphics component can't be added until all textures have finished loading\r\n            // TODO use progress callbacks instead of timeouts\r\n            setTimeout(() => this.skybox.setComponent(_graphics_graphics__WEBPACK_IMPORTED_MODULE_3__.GraphicsData, skyboxMesh), 300);\r\n        }\r\n        for (const entity of _json_entities_json__WEBPACK_IMPORTED_MODULE_4__.spawn) {\r\n            console.log(entity.name);\r\n            const e = new _ecs_entity__WEBPACK_IMPORTED_MODULE_1__.default();\r\n            if ('PhysicsData' in entity) {\r\n                const physicsData = entity.PhysicsData;\r\n                switch (physicsData.type) {\r\n                    case 'capsule': {\r\n                        const { mass, radius, height } = physicsData;\r\n                        const body = _physics__WEBPACK_IMPORTED_MODULE_5__.Physics.makeCapsule(mass, radius, height);\r\n                        body.allowSleep = false;\r\n                        body.position.y = 18;\r\n                        body.position.x = -6;\r\n                        body.fixedRotation = true;\r\n                        body.linearDamping = 0.9;\r\n                        body.updateMassProperties();\r\n                        e.setComponent(_physics__WEBPACK_IMPORTED_MODULE_5__.PhysicsData, body);\r\n                        break;\r\n                    }\r\n                    default:\r\n                        throw new Error(`Unable to parse PhysicsData type ${physicsData.type}`);\r\n                }\r\n            }\r\n            if ('GraphicsData' in entity) {\r\n                const graphicsData = entity.GraphicsData;\r\n                switch (graphicsData.type) {\r\n                    case 'model': {\r\n                        this.assetLoader.loadModel(graphicsData.path, (mesh) => {\r\n                            e.setComponent(_graphics_graphics__WEBPACK_IMPORTED_MODULE_3__.GraphicsData, mesh);\r\n                        });\r\n                        break;\r\n                    }\r\n                    case 'light:directional': {\r\n                        const light = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(graphicsData.color, graphicsData.intensity);\r\n                        const { x, y, z } = graphicsData.position;\r\n                        light.position.set(x, y, z);\r\n                        light.castShadow = true;\r\n                        const { shadow } = light;\r\n                        shadow.bias = -0.008;\r\n                        shadow.camera.near = 1;\r\n                        shadow.camera.left = -1024;\r\n                        shadow.camera.right = 1024;\r\n                        shadow.camera.top = 1024;\r\n                        shadow.camera.bottom = -1024;\r\n                        shadow.mapSize.width = 1024;\r\n                        shadow.mapSize.height = 1024;\r\n                        e.setComponent(_graphics_graphics__WEBPACK_IMPORTED_MODULE_3__.GraphicsData, light);\r\n                        break;\r\n                    }\r\n                    case 'light:ambient': {\r\n                        const light = new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(graphicsData.color, graphicsData.intensity);\r\n                        e.setComponent(_graphics_graphics__WEBPACK_IMPORTED_MODULE_3__.GraphicsData, light);\r\n                        break;\r\n                    }\r\n                    default:\r\n                        throw new Error(`Unable to parse GraphicsData type ${graphicsData.type}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    update(dt) {\r\n        // center skybox around camera\r\n        const camera = _ecs_entity__WEBPACK_IMPORTED_MODULE_1__.default.getTag(_graphics_graphics__WEBPACK_IMPORTED_MODULE_3__.CAMERA_TAG).getComponent(_graphics_graphics__WEBPACK_IMPORTED_MODULE_3__.CameraData);\r\n        this.skybox.getComponent(_graphics_graphics__WEBPACK_IMPORTED_MODULE_3__.GraphicsData).position.copy(camera.position);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://the-grove/./src/js/game/scene.ts?");

/***/ }),

/***/ "./src/js/script.ts":
/*!**************************!*\
  !*** ./src/js/script.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GameScript)\n/* harmony export */ });\n/* harmony import */ var auto_bind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! auto-bind */ \"./node_modules/auto-bind/index.js\");\n/* harmony import */ var auto_bind__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(auto_bind__WEBPACK_IMPORTED_MODULE_0__);\n\r\n/**\r\n * Helper class for making core engine systems available to derived classes\r\n *\r\n * If `queries` **IS** set, `update()` gets called once per each game entity which contains all\r\n * components specified in `queries`, and recieves that entity as a paramenter.\r\n *\r\n * If `queries` **IS NOT** set, `update()` is only called once, and is not passed any entities.\r\n *\r\n * @note `GameScript` employs Sindresorhus' `autoBind()` in the constructor, meaning there's no need\r\n * to call `this.method.bind(this)` when passing methods as callbacks.\r\n *\r\n * @example\r\n * this.graphics.doSomething(); // no need for accessing engine directly\r\n * this.assetLoader.loadModel('/assets/foo', this.loadCallback); // no need for .bind()\r\n */\r\nclass GameScript {\r\n    constructor(engine) {\r\n        this.engine = engine;\r\n        this.graphics = engine.graphics;\r\n        this.physics = engine.physics;\r\n        this.ecs = engine.ecs;\r\n        this.gui = engine.gui;\r\n        this.assetLoader = engine.assetLoader;\r\n        auto_bind__WEBPACK_IMPORTED_MODULE_0___default()(this);\r\n    }\r\n    /** @virtual */\r\n    // eslint-disable-next-line class-methods-use-this, no-empty-function\r\n    init() { }\r\n    /** @virtual */\r\n    // eslint-disable-next-line class-methods-use-this, no-empty-function\r\n    update(dt) { }\r\n}\r\n\n\n//# sourceURL=webpack://the-grove/./src/js/script.ts?");

/***/ }),

/***/ "./src/js/json/entities.json":
/*!***********************************!*\
  !*** ./src/js/json/entities.json ***!
  \***********************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"spawn\":[{\"name\":\"Homie\",\"PhysicsData\":{\"type\":\"capsule\",\"mass\":7,\"radius\":0.3,\"height\":1.737},\"GraphicsData\":{\"type\":\"model\",\"path\":\"/models/character-base-glb/CharacterBase.glb\"}},{\"name\":\"Sun Light\",\"GraphicsData\":{\"type\":\"light:directional\",\"color\":\"#ffffff\",\"position\":{\"x\":10,\"y\":30,\"z\":20}}},{\"name\":\"Ambient Light\",\"GraphicsData\":{\"type\":\"light:ambient\",\"color\":\"#ffffff\",\"intensity\":0.16}}]}');\n\n//# sourceURL=webpack://the-grove/./src/js/json/entities.json?");

/***/ })

}]);