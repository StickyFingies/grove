var j=Object.defineProperty;var k=(e,t,o)=>t in e?j(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o;var a=(e,t,o)=>(k(e,typeof t!="symbol"?t+"":t,o),o);import{V as p,E as C,w as c,P as v,e as x,C as z,r as M,p as l}from"./game.d0ad9aae.js";import{smoothCamera as P,SmoothCamera as R}from"./smoothCamera.8cfd5353.js";class S{constructor(){a(this,"walkVelocity",0);a(this,"jumpVelocity",0);a(this,"wantsToJump",!1);a(this,"sprinting",!1);a(this,"groundNormal",new p);a(this,"moveForward",!1);a(this,"moveBackward",!1);a(this,"moveLeft",!1);a(this,"moveRight",!1);a(this,"euler",new C(0,0,0,"YXZ"))}}c.addRule({name:"Movement affects physical objects",types:[v,x,S],fn([e,t,o]){const i=new p(0,0,0);o.moveForward&&(i.z=-1),o.moveBackward&&(i.z=1),o.moveLeft&&(i.x=-1),o.moveRight&&(i.x=1);const[{object:s,positionStep:y,quaternionStep:u,offsetY:w,offsetZ:d}]=c.get(P,[R]),[f]=c.get(c.getTag(z),[M]);i.applyQuaternion(s.quaternion);const n=i.normalize();n.multiplyScalar(o.walkVelocity),n.multiplyScalar(o.sprinting?5:1);const m=[n.x,0,n.z];l.addVelocity({object:e,vector:m});const r=l.getBodyPosition(e);o.wantsToJump&&l.addVelocityConditionalRaycast({velocity:{object:e,vector:[0,o.jumpVelocity,0]},raycast:{id:0,from:r,to:[r[0],r[1]-2.5,r[2]]}});const[g,V,h]=l.getBodyPosition(e);s.position.copy(new p(g,V+1,h)),s.position.y+=w,s.translateZ(d),f.position.lerp(s.position,y),f.quaternion.slerp(s.quaternion,u),t.rotation.y=Math.PI+o.euler.y}});export{S as Movement};
